<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">

    <import resource="classpath*:spring-config-dao.xml"/>
    <import resource="classpath:spring-config-mvc.xml"/>
    <import resource="classpath*:spring-config-services.xml"/>
    <!-- 配置 shiro 的核心组件：securityManager -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!-- 配置缓存 -->
        <property name="cacheManager" ref="cacheManager"/>
        <!-- 配置域realm，用户名，密码，角色都保存在域里：实现从数据库中获取用户信息，需要我们自己创建一个类（实现Realm接口） -->
        <property name="realm" ref="shiroRealm"/>
    </bean>

    <!-- 配置ehcache缓存bean，导入ehcache并新建配置文件 -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:encache.xml"></property>
    </bean>

    <!--<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />-->
    <!--<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"-->
          <!--depends-on="lifecycleBeanPostProcessor">-->
        <!--<property name="proxyTargetClass" value="true"/>-->
    <!--</bean> &lt;!&ndash;此处的depends-on与上面的LifecycleBeanPostProcessor配置的id保持一致&ndash;&gt;-->
    <!--<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">-->
        <!--<property name="securityManager" ref="securityManager"/>-->
    <!--</bean>-->
    <!-- 配置自己域realm实现  -->
    <bean id="shiroRealm" class="cn.edu.swpu.info.college_website.Realm.AuthRealm">
        <!--实现MD5加密-->
        <!--<property name="credentialsMatcher">-->
            <!--<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">-->
                <!--<property name="hashAlgorithmName" value="MD5"></property>-->
                <!--&lt;!&ndash;加密次数&ndash;&gt;-->
                <!--<property name="hashIterations" value="1024"></property>-->
            <!--</bean>-->
        <!--</property>-->
    </bean>

    <!-- 配置shiro的一些拦截规则，id必须和web.xml中的 shiro 拦截器名一致 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!-- Shiro的核心安全接口,这个属性是必须的 -->
        <property name="securityManager" ref="securityManager" />
        <!-- 身份认证失败，则跳转到登录页面的配置 -->
        <property name="loginUrl" value="/index.jsp" />
        <!-- 登录成功后的页面 -->
        <property name="successUrl" value="/admin/index" />
        <!-- 权限认证失败，则跳转到指定页面 -->
        <property name="unauthorizedUrl"  value="/unauthorized" />  <!-- 登录后访问没有权限的页面后跳转的页面 -->
        <!-- Shiro连接约束配置,即过滤链的定义 -->
        <property name="filterChainDefinitions">
            <value>
                <!-- 注意：规则是有顺序的，从上到下，拦截范围必须是从小到大的 -->
                <!--  url = 拦截规则（anon为匿名，authc为要登录后，才能访问，logout登出过滤） -->
                <!--图片资源的拦截-->
                /Img/identifyCode/img=anon
                /Img/logins=anon
                /Img/**=roles[admin]
                <!--新闻资源的拦截-->
                /message/insertMessage=roles[admin]
                /message/uploadImg=roles[admin]
                /message/deleteMessage=roles[admin]
                /message/updateMessage=roles[admin]
                <!--超级管理员的权限拦截-->
                /Admin/getAllAdmin=roles[sysadmin]
                /Admin/modifyRight=roles[sysadmin]
                /Login.jsp = anon
                /logout = logout
                /add.jsp=authc
                <!--/CollegeNews=authc-->
                <!--/AdminPage.vue=authc-->
                /get.jsp=anon
                <!--/Admin/login=anon-->
                /**= anon
            </value>
        </property>
    </bean>
</beans>